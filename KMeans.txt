Code :
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
data = pd.read_csv('Wholesale customers data.csv')
data.head()
Output :

categorical_features = ['Channel', 'Region ']

continuous_features = ['Fresh', 'Milk', 'Grocery', 'Frozen','Detergents_Paper', 'Delicassen']

data[continuous_features].describe()
for col in categorical_features:
 dummies = pd.get_dummies (data [col], prefix=col)
 data = pd.concat([data, dummies], axis=1)
 data.drop(col, axis=1, inplace=True)
 data.head()
Output :


Code :
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
data = pd.read_csv('Wholesale customers data.csv')
scaler = MinMaxScaler()
data_transformed = scaler.fit_transform(data.select_dtypes (include=['float64', 'int64']))
Sum_of_squared_distances = []
K = range(1,15)
for k in K:
 km = KMeans (n_clusters=k, random_state=42)
 km.fit(data_transformed)
 Sum_of_squared_distances.append(km.inertia_)
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k (Number of Clusters)')
plt.ylabel('Sum of Squared Distances (Inertia)')
plt.title('Elbow Method For Optimal k')
plt.show()
Output :
